#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 20, 2018 01:38:14 PM +0200  platform: Windows NT
import os
import shutil
import sys
import timeit
import tkinter
import ujson
from tkinter import messagebox, filedialog
from tkinter.filedialog import askdirectory, askopenfile
from tkinter.tix import ScrolledListBox

from ReadFile import ReadFile
from Searcher import Searcher

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import partB_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    partB_support.set_Tk_var()
    top = Toplevel1 (root)
    partB_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    partB_support.set_Tk_var()
    top = Toplevel1 (w)

    partB_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        self.ReadCitiesIndex = None
        self.ReadBaseDict = None
        self.ReadFileIndex = None
        self.ReadfinalIndex = None
        self.engineReadFile=None
        self.win=None
        self.Multiwin=None
        self.languageList = None
        self.itemLineEnt = None
        self.IDQ = 1
        self.winE = None
        self.winES = None
        self.idQ = 999
        self.selectQ = ""
        font9 = "-family {Segoe UI} -size 9 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family {Segoe UI} -size 30 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font11 = "-family {Segoe UI} -size 11 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("933x488+413+174")
        top.title("Engine!")
        top.configure(background="#d9d9d9")

        self.TitleLable = tk.Label(top)
        self.TitleLable.place(relx=0.334, rely=0.02, height=51, width=284)
        self.TitleLable.configure(activebackground="#dcef62")
        self.TitleLable.configure(activeforeground="#000000")
        self.TitleLable.configure(background="#d9d9d9")
        self.TitleLable.configure(disabledforeground="#a3a3a3")
        self.TitleLable.configure(font=font10)
        self.TitleLable.configure(foreground="#000000")
        self.TitleLable.configure(text='''Engine - part B''')
        self.TitleLable.configure(width=284)

        self.Labelframe_srcPath = tk.LabelFrame(top)
        self.Labelframe_srcPath.place(relx=0.275, rely=0.143, relheight=0.113
                , relwidth=0.437)
        self.Labelframe_srcPath.configure(relief='groove')
        self.Labelframe_srcPath.configure(foreground="black")
        self.Labelframe_srcPath.configure(text='''Source path:''')
        self.Labelframe_srcPath.configure(background="#d9d9d9")
        self.Labelframe_srcPath.configure(width=320)

        self.browseCorpusButton = ttk.Button(self.Labelframe_srcPath)
        self.browseCorpusButton.place(relx=0.719, rely=0.364, height=25, width=76
                , bordermode='ignore')
        self.browseCorpusButton.configure(takefocus="")
        self.browseCorpusButton.configure(text='''Browse''')
        self.browseCorpusButton.configure(command=self.corpusBrowse)

        self.corpusPathTextField = tk.Entry(top)
        self.corpusPathTextField.place(relx=0.29, rely=0.184, height=20
                , relwidth=0.292)
        self.corpusPathTextField.configure(background="white")
        self.corpusPathTextField.configure(disabledforeground="#a3a3a3")
        self.corpusPathTextField.configure(font="TkFixedFont")
        self.corpusPathTextField.configure(foreground="#000000")
        self.corpusPathTextField.configure(insertbackground="black")
        self.corpusPathTextField.configure(textvariable=partB_support.corpusTextField)
        self.corpusPathTextField.configure(width=214)

        self.Labelframe_posting = tk.LabelFrame(top)
        self.Labelframe_posting.place(relx=0.275, rely=0.266, relheight=0.113
                , relwidth=0.437)
        self.Labelframe_posting.configure(relief='groove')
        self.Labelframe_posting.configure(foreground="black")
        self.Labelframe_posting.configure(text='''Saving path:''')
        self.Labelframe_posting.configure(background="#d9d9d9")
        self.Labelframe_posting.configure(highlightbackground="#d9d9d9")
        self.Labelframe_posting.configure(highlightcolor="black")
        self.Labelframe_posting.configure(width=320)

        self.browsePostingButton = ttk.Button(self.Labelframe_posting)
        self.browsePostingButton.place(relx=0.719, rely=0.364, height=25
                , width=76, bordermode='ignore')
        self.browsePostingButton.configure(takefocus="")
        self.browsePostingButton.configure(text='''Browse''')
        self.browsePostingButton.configure(width=76)
        self.browsePostingButton.configure(command=self.posingBrowse)

        self.postingPathTextField = tk.Entry(top)
        self.postingPathTextField.place(relx=0.29, rely=0.307, height=20
                , relwidth=0.292)
        self.postingPathTextField.configure(background="white")
        self.postingPathTextField.configure(disabledforeground="#a3a3a3")
        self.postingPathTextField.configure(font="TkFixedFont")
        self.postingPathTextField.configure(foreground="#000000")
        self.postingPathTextField.configure(highlightbackground="#d9d9d9")
        self.postingPathTextField.configure(highlightcolor="black")
        self.postingPathTextField.configure(insertbackground="black")
        self.postingPathTextField.configure(selectbackground="#c4c4c4")
        self.postingPathTextField.configure(selectforeground="black")
        self.postingPathTextField.configure(textvariable=partB_support.postingTextField)

        self.resetAllButton = ttk.Button(top)
        self.resetAllButton.place(relx=0.60, rely=0.389, height=25)
        self.resetAllButton.configure(takefocus="")
        self.resetAllButton.configure(text='''Reset & Delete All''')
        self.resetAllButton.configure(command=self.resetAll)

        self.allTermsButton = ttk.Button(top)
        self.allTermsButton.place(relx=0.513, rely=0.389, height=25, width=76)
        self.allTermsButton.configure(takefocus="")
        self.allTermsButton.configure(text='''All Terms''')
        self.allTermsButton.configure(state='disabled')
        self.allTermsButton.configure(command=self.showDict)

        self.loadFileButton = ttk.Button(top)
        self.loadFileButton.place(relx=0.546, rely=0.451, height=25, width=156)
        self.loadFileButton.configure(command=partB_support.makeTry)
        self.loadFileButton.configure(takefocus="")
        self.loadFileButton.configure(text='''Load Files from Path''')
        self.loadFileButton.configure(width=156)
        self.loadFileButton.configure(command=self.loadFileGenerate)
        # self.loadFileButton.configure(state='disabled')

        self.loadedLable = ttk.Label(top)
        self.loadedLable.place(relx=0.550, rely=0.500, height=25, width=156)
        self.loadedLable.configure(background="#d9d9d9")
        self.loadedLable.configure(foreground="#d9d9d9")
        self.loadedLable.configure(relief='flat')
        self.loadedLable.configure(text='Index Loaded!')
        self.loadedLable.configure(font=font9)


        self.generateIndexButton = tk.Button(top)
        self.generateIndexButton.place(relx=0.275, rely=0.389, height=54
                                       , width=131)
        self.generateIndexButton.configure(activebackground="#ececec")
        self.generateIndexButton.configure(activeforeground="#000000")
        self.generateIndexButton.configure(background="#d9d9d9")
        self.generateIndexButton.configure(disabledforeground="#a3a3a3")
        self.generateIndexButton.configure(foreground="#000000")
        self.generateIndexButton.configure(highlightbackground="#d9d9d9")
        self.generateIndexButton.configure(highlightcolor="black")
        self.generateIndexButton.configure(pady="0")
        self.generateIndexButton.configure(text='Generate New Index')
        # self.generateIndexButton.configure(textvariable=partB_support.generateButton)
        self.generateIndexButton.configure(command=self.generateIndex)
        self.generateIndexButton.configure(width=131)

        self.Labelframe_queryField = tk.LabelFrame(top)
        self.Labelframe_queryField.place(relx=0.027, rely=0.554, relheight=0.410
                , relwidth=0.941)
        self.Labelframe_queryField.configure(relief='groove')
        self.Labelframe_queryField.configure(foreground="black")
        self.Labelframe_queryField.configure(text='''Query Field''')
        self.Labelframe_queryField.configure(background="#d9d9d9")
        self.Labelframe_queryField.configure(width=690)

        self.singleQuerySearchButton = ttk.Button(self.Labelframe_queryField)
        self.singleQuerySearchButton.place(relx=0.507, rely=0.171, height=25
                , width=110, bordermode='ignore')
        self.singleQuerySearchButton.configure(takefocus="")
        self.singleQuerySearchButton.configure(text='''Search Query''')
        self.singleQuerySearchButton.configure(width=110)
        self.singleQuerySearchButton.configure(state='disabled')
        self.singleQuerySearchButton.configure(command=self.resultsQueryRegular)

        self.singleQueryTextField = ttk.Entry(self.Labelframe_queryField)
        self.singleQueryTextField.place(relx=0.014, rely=0.171, relheight=0.12
                , relwidth=0.458, bordermode='ignore')
        self.singleQueryTextField.configure(width=316)
        self.singleQueryTextField.configure(takefocus="")
        self.singleQueryTextField.configure(cursor="ibeam")
        self.singleQueryTextField.configure(state='disabled')


        self.multiQueryTextField = ttk.Entry(self.Labelframe_queryField)
        self.multiQueryTextField.place(relx=0.014, rely=0.443, relheight=0.12
                , relwidth=0.284, bordermode='ignore')
        self.multiQueryTextField.configure(width=196)
        self.multiQueryTextField.configure(takefocus="")
        self.multiQueryTextField.configure(cursor="ibeam")
        self.multiQueryTextField.configure(state='disabled')

        self.orLable = ttk.Label(self.Labelframe_queryField)
        self.orLable.place(relx=0.01, rely=0.300
                , bordermode='ignore')
        self.orLable.configure(background="#d9d9d9")
        self.orLable.configure(foreground="#000000")
        self.orLable.configure(font=font11)
        self.orLable.configure(relief='flat')
        self.orLable.configure(text='''~or choose queries file:~''')


        self.browseMultiQueryButton = ttk.Button(self.Labelframe_queryField)
        self.browseMultiQueryButton.place(relx=0.319, rely=0.443, height=25
                , width=97, bordermode='ignore')
        self.browseMultiQueryButton.configure(takefocus="")
        self.browseMultiQueryButton.configure(text='''browse file''')
        self.browseMultiQueryButton.configure(width=117)
        self.browseMultiQueryButton.configure(state='disabled')
        self.browseMultiQueryButton.configure(command=self.queryFileBrowse)

        self.multiQuerySeachButton = ttk.Button(self.Labelframe_queryField)
        self.multiQuerySeachButton.place(relx=0.430, rely=0.443, height=25
                , width=131, bordermode='ignore')
        self.multiQuerySeachButton.configure(takefocus="")
        self.multiQuerySeachButton.configure(text='''Search on Queries file''')
        self.multiQuerySeachButton.configure(width=108)
        self.multiQuerySeachButton.configure(state='disabled')
        self.multiQuerySeachButton.configure(command=self.resultsQueryMulti)

        self.CitiesLable = ttk.Label(self.Labelframe_queryField)
        self.CitiesLable.place(relx=0.725, rely=0.1, height=24
                , bordermode='ignore')
        self.CitiesLable.configure(background="#d9d9d9")
        self.CitiesLable.configure(foreground="#000000")
        self.CitiesLable.configure(font=font11)
        self.CitiesLable.configure(relief='flat')
        self.CitiesLable.configure(text='''List of Cities:''')

        self.LanguagesLable = ttk.Label(self.Labelframe_queryField)
        self.LanguagesLable.place(relx=0.01, rely=0.8, height=24)
        self.LanguagesLable.configure(background="#d9d9d9")
        self.LanguagesLable.configure(foreground="#000000")
        self.LanguagesLable.configure(font=font11)
        self.LanguagesLable.configure(relief='flat')
        self.LanguagesLable.configure(text='''List of Languages:''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.lab66_tCh84 = ttk.Checkbutton(self.Labelframe_queryField)
        self.lab66_tCh84.place(relx=0.725, rely=0.2
                , relheight=0.0, height=21, bordermode='ignore')
        self.lab66_tCh84.configure(takefocus="")
        self.lab66_tCh84.configure(text='''Show results only from selected Cities''')
        self.lab66_tCh84.configure(state='disabled')
        self.onlyCitiesRes = tk.IntVar()
        self.lab66_tCh84.configure(variable=self.onlyCitiesRes)


        self.semanticCheckBox = ttk.Checkbutton(self.Labelframe_queryField)
        self.semanticCheckBox.place(relx=0.014, rely=0.571, relwidth=0.322
                , relheight=0.0, height=21, bordermode='ignore')
        self.semanticCheckBoxV = tk.IntVar()
        self.semanticCheckBox.configure(variable=self.semanticCheckBoxV)
        self.semanticCheckBox.configure(takefocus="")
        self.semanticCheckBox.configure(text='''Semantic Search?''')
        self.semanticCheckBox.configure(state='disabled')

        self.entitiesCheckBox = ttk.Checkbutton(self.Labelframe_queryField)
        self.entitiesCheckBox.place(relx=0.014, rely=0.65, relwidth=0.262
                , relheight=0.0, height=21, bordermode='ignore')
        # self.entitiesCheckBox.configure(variable=partB_support.entitiesResV)
        self.entitiesCheckBoxV = tk.IntVar()
        self.entitiesCheckBox.configure(variable=self.entitiesCheckBoxV)

        self.entitiesCheckBox.configure(takefocus="")
        self.entitiesCheckBox.configure(text='''Show entitieses in results''')
        self.entitiesCheckBox.configure(width=181)
        self.entitiesCheckBox.configure(cursor="fleur")
        self.entitiesCheckBox.configure(state='disabled')

        self.citiesList = tk.Listbox(top)
        self.citiesList.place(relx=0.709, rely=0.676, relheight=0.25
                , relwidth=0.237)
        self.citiesList.configure(background="white")
        self.citiesList.configure(disabledforeground="#a3a3a3")
        self.citiesList.configure(font="TkFixedFont")
        self.citiesList.configure(foreground="#000000")
        self.citiesList.configure(width=174)
        self.citiesList.configure(selectmode='multiple')

        self.StemmingCheckBox = tk.Checkbutton(top)
        self.StemmingCheckBox.place(relx=0.260, rely=0.512, relheight=0.051
                , relwidth=0.12)
        self.StemmingCheckBox.configure(activebackground="#ececec")
        self.StemmingCheckBox.configure(activeforeground="#000000")
        self.StemmingCheckBox.configure(background="#d9d9d9")
        self.StemmingCheckBox.configure(disabledforeground="#a3a3a3")
        self.StemmingCheckBox.configure(foreground="#000000")
        self.StemmingCheckBox.configure(highlightbackground="#d9d9d9")
        self.StemmingCheckBox.configure(highlightcolor="black")
        self.StemmingCheckBox.configure(justify='left')
        self.StemmingCheckBox.configure(text='''Stemming?''')
        self.doStemmingV = tk.IntVar()
        self.StemmingCheckBox.configure(variable=self.doStemmingV)
        self.doStemmingVwhenClicked = self.doStemmingV


        self.TcomboBoxLanguages = ttk.Combobox(top ,state='readonly')
        self.TcomboBoxLanguages.place(relx=0.18, rely=0.886)



        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)


    def corpusBrowse(self):
        dirWind = tk.Tk()
        dirWind.withdraw()
        path = askdirectory()
        if(len(str(self.corpusPathTextField.get())) != 0):
            self.corpusPathTextField.delete(0, 'end')
        self.corpusPathTextField.insert(0, str(path))
        dirWind.destroy()

    def posingBrowse(self):
        dirWind = tk.Tk()
        dirWind.withdraw()
        path = askdirectory()
        if(len(str(self.postingPathTextField.get())) != 0):
            self.postingPathTextField.delete(0,'end')
        self.postingPathTextField.insert(0,str(path))
        dirWind.destroy()

    def loadFileGenerate(self):
        if(self.postingPathTextField.get() ==None or
                self.postingPathTextField.get() == "" or
                os.path.isdir (self.postingPathTextField.get()) == False):
            messagebox.showerror('oops!', 'Please insert a valid source path!')
        else:
            if(self.doStemmingV.get() ==1 and(os.path.exists(self.postingPathTextField.get()+"/S_finalIndex.txt") == False or os.path.exists(self.postingPathTextField.get() + "/S_citiesIndex.ujson") == False or os.path.exists(self.postingPathTextField.get() + "/S_baseDict.ujson") == False or os.path.exists(self.postingPathTextField.get() + "/S_fileIndex.ujson") == False )):
                messagebox.showerror('oops!', 'Cannot find files to load \nmake sure you generated them first!\n(or write another path)')
            elif(self.doStemmingV.get() ==0 and(os.path.exists(self.postingPathTextField.get()+"/finalIndex.txt") == False or os.path.exists(self.postingPathTextField.get() + "/citiesIndex.ujson") == False or os.path.exists(self.postingPathTextField.get() + "/baseDict.ujson") == False or os.path.exists(self.postingPathTextField.get() + "/fileIndex.ujson") == False )):
                messagebox.showerror('oops!', 'Cannot find files to load \nmake sure you generated them first!\n(or write another path)')
            if(os.path.exists(self.postingPathTextField.get()+"/stop_words.txt") == False):
                messagebox.showerror('oops!', 'You must have in you files \n "stop_words.txt" file!\nadd it and load again')
                return
            else:
                self.allTermsButton.configure(state='normal')
                self.singleQuerySearchButton.configure(state='normal')
                self.singleQueryTextField.configure(state='normal')
                self.multiQueryTextField.configure(state='normal')
                self.browseMultiQueryButton.configure(state='normal')
                self.multiQuerySeachButton.configure(state='normal')
                self.lab66_tCh84.configure(state='normal')
                self.semanticCheckBox.configure(state='normal')
                self.entitiesCheckBox.configure(state='normal')
                self.loadPostingAndDict()
                self.addCities()
                if (os.path.exists(self.postingPathTextField.get() + "/languageList.txt")):
                    with open(self.postingPathTextField.get() + "/languageList.txt", "r+") as file:
                        self.languageList = file.readlines()
                        file.close()

                    self.TcomboBoxLanguages.configure(values=self.languageList)
                    self.TcomboBoxLanguages.current(0)
                self.loadedLable.configure(foreground="#000000")
                self.loaded = Searcher(self.postingPathTextField.get()+"/stop_words.txt"
                                       ,self.postingPathTextField.get(),self.doStemmingV.get(),self.ReadBaseDict,self.ReadFileIndex,self.entitiesCheckBoxV.get(),self.semanticCheckBoxV.get())

    def resetQueryAera(self):
        self.singleQueryTextField.delete(0, 'end')
        self.multiQueryTextField.delete(0, 'end')
        self.citiesList.delete(0,'end')
        self.entitiesCheckBoxV.set(0)
        self.onlyCitiesRes.set(0)
        self.semanticCheckBoxV.set(0)

    def loadPostingAndDict(self):
        self.resetQueryAera()
        if (self.doStemmingV.get() == 0):
            citiesfile = open(self.postingPathTextField.get() + "/citiesIndex.ujson", "r+")
            baseFile = open(self.postingPathTextField.get() + "/baseDict.ujson", "r+")
            fileFile = open(self.postingPathTextField.get() + "/fileIndex.ujson", "r+")
        else:
            citiesfile = open(self.postingPathTextField.get() + "/S_citiesIndex.ujson", "r+")
            baseFile = open(self.postingPathTextField.get() + "/S_baseDict.ujson", "r+")
            fileFile = open(self.postingPathTextField.get() + "/S_fileIndex.ujson", "r+")

        self.ReadCitiesIndex = ujson.load(citiesfile)
        self.ReadBaseDict = ujson.load(baseFile)
        self.ReadFileIndex = ujson.load(fileFile)
        citiesfile.close()
        baseFile.close()
        fileFile.close()

        self.doStemmingVwhenClicked = self.doStemmingV

    def generateIndex(self):

        self.loadedLable.configure(foreground="#d9d9d9")
        self.allTermsButton.configure(state='disabled')
        self.singleQuerySearchButton.configure(state='disabled')
        self.singleQueryTextField.configure(state='disabled')
        self.multiQueryTextField.configure(state='disabled')
        self.browseMultiQueryButton.configure(state='disabled')
        self.multiQuerySeachButton.configure(state='disabled')
        self.lab66_tCh84.configure(state='disabled')
        self.semanticCheckBox.configure(state='disabled')
        self.entitiesCheckBox.configure(state='disabled')
        self.citiesList.delete(0, 'end')
        self.resetQueryAera()
        override=False
        if(self.notEmptyCheck()):
            start = timeit.default_timer()
            if(os.path.exists(self.corpusPathTextField.get()+"/stop_words.txt") == False):
                messagebox.showinfo('oops!', 'To generate index you most give a corpus \n with stop_words.txt file!')
            else:
                if (self.doStemmingV.get() == 1):
                    if (os.path.exists(self.postingPathTextField.get() + "/S_finalIndex.txt")):
                        override = True
                        os.remove(self.postingPathTextField.get() + "/S_finalIndex.txt")
                    if (os.path.exists(self.postingPathTextField.get() + "/S_fileIndex.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get() + "/S_fileIndex.ujson")
                    if (os.path.exists(self.postingPathTextField.get() + "/S_citiesIndex.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get() + "/S_citiesIndex.ujson")
                    if (os.path.exists(self.postingPathTextField.get() + "/S_baseDict.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get() + "/S_baseDict.ujson")
                else:
                    if(os.path.exists(self.postingPathTextField.get()+"/finalIndex.txt")):
                        override=True
                        os.remove(self.postingPathTextField.get()+"/finalIndex.txt")
                    if(os.path.exists(self.postingPathTextField.get()+"/fileIndex.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get()+"/fileIndex.ujson")
                    if(os.path.exists(self.postingPathTextField.get()+"/citiesIndex.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get()+"/citiesIndex.ujson")
                    if(os.path.exists(self.postingPathTextField.get()+"/baseDict.ujson")):
                        override = True
                        os.remove(self.postingPathTextField.get()+"/baseDict.ujson")
                if (os.path.exists(self.postingPathTextField.get() + "/languageList.txt")):
                    os.remove(self.postingPathTextField.get() + "/languageList.txt")
                os.makedirs(self.postingPathTextField.get() + "/tempDir")
                engineReadFile = ReadFile(self.corpusPathTextField.get(),self.postingPathTextField.get() + "/tempDir")
                if (self.doStemmingV.get() == 1):
                    engineReadFile.do_Stemming = True



                engineReadFile.readAllFiles()  ## START_WORK
                stop = timeit.default_timer()
                string = "~### FINISH ###~ :\n" + str(stop - start) + " seconds takes to index everything.\n" + \
                         str(engineReadFile.textCount) + " files indexes!\n" + str(
                    len(engineReadFile.indexer.baseDict.keys())) + " terms is created!\n\n" + \
                    "The index saved in "+str(self.postingPathTextField.get()) + "\n\n =For use Query Field : click on Load button="
                if(self.doStemmingV.get() == 1):
                    string = "<Stemming button is ON>\n\n" + string
                else:
                    string = "<Stemming button is OFF>\n\n" + string
                if(override):
                    string = "^^^^^^ The previous index was deleted ^^^^^^\n" + string

                messagebox.showinfo('Info about Creation', string)
                #
                files = os.listdir(self.postingPathTextField.get() + "/tempDir")
                for f in files:
                    shutil.move(self.postingPathTextField.get() + "/tempDir/" + f, self.postingPathTextField.get())
                os.rmdir(self.postingPathTextField.get() + "/tempDir")

        else:
            messagebox.showinfo('oops!', 'To generate index you most 2 valid paths \n put valid ones!')
    def notEmptyCheck(self):
        return ((self.corpusPathTextField.get() != None and self.corpusPathTextField.get() !="")
                and (self.postingPathTextField.get() != None and self.postingPathTextField.get() !=""))

    def addCities(self):
        i=0
        for city in self.ReadCitiesIndex:
            self.citiesList.insert(i,city)
            i=i+1
    def resetAll(self):
        try:
            self.loadedLable.configure(background="#d9d9d9")
            self.loadedLable.configure(foreground="#d9d9d9")
            self.doStemmingVwhenClicked = self.doStemmingV
            if(self.doStemmingVwhenClicked.get()  == 0):
                os.remove(self.postingPathTextField.get()+"/finalIndex.txt")
                os.remove(self.postingPathTextField.get()+"/fileIndex.ujson")
                os.remove(self.postingPathTextField.get()+"/citiesIndex.ujson")
                os.remove(self.postingPathTextField.get()+"/baseDict.ujson")
                string = "*NON-STEMMING* Index Files deleted!\nEverything reset"
            elif (self.doStemmingVwhenClicked.get() == 1):
                os.remove(self.postingPathTextField.get()+"/S_finalIndex.txt")
                os.remove(self.postingPathTextField.get()+"/S_fileIndex.ujson")
                os.remove(self.postingPathTextField.get()+"/S_citiesIndex.ujson")
                os.remove(self.postingPathTextField.get()+"/S_baseDict.ujson")
                string = "*STEMMING* Index Files deleted!\nEverything reset"
            # self.saveResultsButton.configure(state='disabled')
            self.allTermsButton.configure(state='disabled')
            self.singleQuerySearchButton.configure(state='disabled')
            self.singleQueryTextField.configure(state='disabled')
            self.multiQueryTextField.configure(state='disabled')
            self.browseMultiQueryButton.configure(state='disabled')
            self.multiQuerySeachButton.configure(state='disabled')
            self.lab66_tCh84.configure(state='disabled')
            self.semanticCheckBox.configure(state='disabled')
            self.entitiesCheckBox.configure(state='disabled')
            self.postingPathTextField.delete(0,'end')
            self.corpusPathTextField.delete(0,'end')
            self.doStemmingV.set(0)
            self.citiesList.delete(0,'end')
            messagebox.showinfo("All Reset!",string)
        except:
            messagebox.showerror('oops!', 'Something worng!\n Check if the files is not already deleted! ')

    def showDict(self):
            win = tk.Toplevel()
            win.geometry("200x220")
            win.title("Terms")
            scrollbar = tk.Scrollbar(win)
            scrollbar.pack(side='right', fill='y')
            win.configure(background='#000000')

            mylist = tk.Listbox(win, yscrollcommand=scrollbar.set,width=200)
            for term in sorted(self.ReadBaseDict,key=str.casefold):
                mylist.insert(tk.END, (str(term) + " : " + str(self.ReadBaseDict[term][2]) + "\n"))

            mylist.pack(side=tk.LEFT, fill=tk.BOTH)
            scrollbar.config(command=mylist.yview)
    def resultsQueryRegular(self):
        if(self.singleQueryTextField.get() != ""):
            if(self.win != None):
                self.destroyMe()
            self.win = tk.Toplevel()
            self.win.geometry("800x420")
            self.win.title("Results for query")
            lb_header = ['No', 'File Name', 'Relevance', 'Entities']
            ttk.Label(self.win, text="Query Results:", font="caliberi 34 bold").pack()
            queryText = "query:'' " + str(self.singleQueryTextField.get()).replace(" ",",")+" ''"
            ttk.Label(self.win, text=queryText, font="caliberi 12 bold").pack()
            self.resTable = ttk.Treeview(self.win, selectmode='browse',columns=lb_header, show="headings")
            # tree.grid(in_=self.Labelframe_results)
            self.resTable.place(height=1870)
            if(self.entitiesCheckBoxV.get() == 1):
                self.resTable.bind("<Double-1>", self.showEntSIngle)
            vsb = ttk.Scrollbar(self.win, orient="vertical", command=self.resTable.yview)
            vsb.place(x=760, y=80, height=200)
            self.resTable.configure(yscrollcommand=vsb.set)
            i = 0
            for col in lb_header:
                self.resTable.heading(col, text=col.title())
                self.resTable.column('No', width=25)
                self.resTable.column('File Name', width=90)
            self.resTable.column('Relevance', width=90)
            self.resTable.column('Entities', width=210)

            self.resTable.delete(*self.resTable.get_children())
            i = 1
            self.preSave=[]
            self.preSave.clear()
            if (self.semanticCheckBoxV.get() == 1):
                self.loaded.doSemantics = 1
            else:
                self.loaded.doSemantics = 0
            if (self.onlyCitiesRes.get() == 1):
                self.loaded.citiesList = self.selectedItemInCitiesList()
            else:
                self.loaded.citiesList = None
            if (self.entitiesCheckBoxV.get() == 1):
                self.loaded.showEntities = self.entitiesCheckBoxV.get()
                dict = self.loaded.singleQueryCalc(self.singleQueryTextField.get())
                for item in dict:
                    self.resTable.insert('', 'end', values=(i, item[0], item[1], dict[item]))
                    self.preSave.append(str(self.IDQ) + " 0 "+item[0]+" 1 "+str(round(item[1],4))+" oi"+" \n")
                    i = i + 1
            else:
                for item in self.loaded.singleQueryCalc(self.singleQueryTextField.get()):
                    self.resTable.insert('', 'end', values=(i, item[0], item[1]))
                    self.preSave.append(str(self.IDQ) + " 0 " + item[0] + " 1 " + str(round(item[1],4)) + " oi" + " \n")
                    i = i + 1

            self.resTable.pack(fill='x',padx=20)

            self.saveResultsButton = ttk.Button(self.win)
            self.saveResultsButton.place(relx=0.735, rely=0.093, height=25, width=76
                                         , bordermode='ignore')
            self.saveResultsButton.configure(takefocus="")
            self.saveResultsButton.configure(text='''Save results''')
            self.saveResultsButton.configure(command=self.saveRes)
            if(i == 1):
                self.saveResultsButton.configure(state='disabled')
            self.saveResultsButton.pack()

            self.exitButton = ttk.Button(self.win)
            self.exitButton.place(relx=0.635, rely=0.093, height=25, width=76
                                         , bordermode='ignore')
            self.exitButton.configure(takefocus="")
            self.exitButton.configure(text='''Exit''')
            self.exitButton.configure(command=self.destroyMe)
            self.exitButton.pack()
        else:
            messagebox.showerror('oops!', 'Please insert a query for search! ')


    def resultsQueryMulti(self):

        if(self.multiQueryTextField.get() == None or self.multiQueryTextField.get() == ""):
            messagebox.showerror('oops!', "Need insert valid path!")
            return
        if(self.Multiwin != None):
            self.MdestroyMe()
        self.Multiwin = tk.Toplevel()
        self.Multiwin.geometry("800x680")
        self.Multiwin.title("Results for Multi Queries:")
        lb_header = ['Query ID', 'Query']
        ttk.Label(self.Multiwin, text="Multi Queries Results:", font="caliberi 34 bold").pack()
        ttk.Label(self.Multiwin, text="list of Queries in file:", font="caliberi 11 bold").pack()
        ttk.Label(self.Multiwin, text="Double click on query wll show it's results", font="caliberi 10").pack()
        self.QureyIDTable = ttk.Treeview(self.Multiwin, selectmode='browse',columns=lb_header, show="headings")
        # tree.grid(in_=self.Labelframe_results)
        self.QureyIDTable.place(height=1870)
        self.QureyIDTable.bind("<Double-1>", self.OnDoubleClick)
        vsb = ttk.Scrollbar(self.Multiwin, orient="vertical", command=self.QureyIDTable.yview)
        vsb.place(x=562, y=120, height=200)
        self.QureyIDTable.configure(yscrollcommand=vsb.set)
        i = 0
        if (self.semanticCheckBoxV.get() == 1):
            self.loaded.doSemantics = 1
        else:
            self.loaded.doSemantics = 0
        if (self.onlyCitiesRes.get() == 1):
            self.loaded.citiesList = self.selectedItemInCitiesList()
        else:
            self.loaded.citiesList = None
        if (self.entitiesCheckBoxV.get() == 1):
            self.loaded.showEntities = self.entitiesCheckBoxV.get()
        self.dictRes = self.loaded.multiQueryCalc(self.multiQueryTextField.get())
        for col in lb_header:
            self.QureyIDTable.heading(col, text=col.title())
            self.QureyIDTable.column('Query ID', width=10)
            self.QureyIDTable.column('Query', width=120)
        self.QureyIDTable.pack(fill='x', padx=220)
        for key in self.dictRes.keys():
            self.QureyIDTable.insert('', 'end', values=(key))

        ############################
        lb_header1 = ['No', 'File Name', 'Relevance', 'Entities']
        ttk.Label(self.Multiwin, text="results for query:", font="caliberi 12 bold").pack()
        ttk.Label(self.Multiwin, text="Double click on line to see entities", font="caliberi 11").pack()
        self.MresTable = ttk.Treeview(self.Multiwin, selectmode='browse', columns=lb_header1, show="headings")
        # tree.grid(in_=self.Labelframe_results)
        self.MresTable.place(height=1870)
        vsb1 = ttk.Scrollbar(self.Multiwin, orient="vertical", command=self.MresTable.yview)
        vsb1.place(x=760, y=387, height=200)
        self.MresTable.configure(yscrollcommand=vsb1.set)
        i = 0
        for col in lb_header1:
            self.MresTable.heading(col, text=col.title())
            self.MresTable.column('No', width=25)
            self.MresTable.column('File Name', width=90)
        self.MresTable.column('Relevance', width=90)
        self.MresTable.column('Entities', width=210)

        self.MresTable.pack(fill='x', padx=20)
        self.MresTable.bind("<Double-1>", self.openEnt)

        self.MsaveResultsButton = ttk.Button(self.Multiwin)
        self.MsaveResultsButton.place(relx=0.735, rely=0.093, height=25, width=76
                                     , bordermode='ignore')
        self.MsaveResultsButton.configure(takefocus="")
        self.MsaveResultsButton.configure(text='''Save results about this query only''')
        self.MsaveResultsButton.configure(command=self.MsaveRes)
        if(len(list(self.QureyIDTable.item(self.QureyIDTable.focus()).values())[2]) == 0):
            self.MsaveResultsButton.configure(state='disabled')
        self.MsaveResultsButton.pack()

        self.MsaveAllResultsButton = ttk.Button(self.Multiwin)
        self.MsaveAllResultsButton.place(relx=0.735, rely=0.093, height=25, width=76
                                     , bordermode='ignore')
        self.MsaveAllResultsButton.configure(takefocus="")
        self.MsaveAllResultsButton.configure(text='''Save results of all queries together''')
        if(self.QureyIDTable.size == (0,0)):
            self.MsaveAllResultsButton.configure(state='disabled')
        self.MsaveAllResultsButton.configure(command=self.MsaveAllRes)
        if(i == 1):
            self.MsaveAllResultsButton.configure(state='disabled')
        self.MsaveAllResultsButton.pack()

        self.MexitButton = ttk.Button(self.Multiwin)
        self.MexitButton.place(relx=0.635, rely=0.093, height=25, width=76
                                     , bordermode='ignore')
        self.MexitButton.configure(takefocus="")
        self.MexitButton.configure(text='''Exit''')
        self.MexitButton.configure(command=self.MdestroyMe)
        self.MexitButton.pack()

    def OnDoubleClick(self,event):

        self.preSave=[]
        self.preSave.clear()
        self.MresTable.delete(*self.MresTable.get_children())
        if(len(list(self.QureyIDTable.item(self.QureyIDTable.focus()).values())[2]) == 0):
            self.MsaveResultsButton.configure(state='disabled')
        try:
            self.idQ = str(list(self.QureyIDTable.item(self.QureyIDTable.focus()).values())[2][0])
            self.selectQ = list(self.QureyIDTable.item(self.QureyIDTable.focus()).values())[2][1]
        except:
            return
        i=1
        if (self.entitiesCheckBoxV.get() ==0):
            for item in self.dictRes[(self.idQ,self.selectQ)]:
                self.MresTable.insert('', 'end', values=(i, item[0], item[1]))
                i += 1
                self.preSave.append(self.idQ + " 0 " + item[0] + " 1 " + str(round(item[1], 2)) + " oi" + " \n")
        else:
            for item in self.dictRes[(self.idQ,self.selectQ)]:
                self.MresTable.insert('', 'end', values=(i, item[0], item[1],self.dictRes[(self.idQ,self.selectQ)][item]))
                i += 1
                self.preSave.append(self.idQ + " 0 " + item[0] + " 1 " + str(round(item[1], 2)) + " oi" + " \n")


        self.MresTable.pack()
        # print(self.idQ)
        # print(self.selectQ)
        # print("-------")
        # print(self.dictRes[(idQ,selectQ)])
        if(len(list(self.QureyIDTable.item(self.QureyIDTable.focus()).values())[2]) != 0):
            self.MsaveResultsButton.configure(state='normal')
        self.MsaveResultsButton.pack()
    def destroyMe(self):
        if(self.winES !=None):
            self.winES.destroy()
            self.winES = None
        self.win.destroy()
        self.win=None
    def MdestroyMe(self):
        if(self.winE !=None):
            self.winE.destroy()
            self.winE = None
        self.Multiwin.destroy()
        self.Multiwin=None


    def saveRes(self):
        pathForSave = askdirectory()
        nameRes = str(self.singleQueryTextField.get()).replace(" ", "_") + "[RESULTS]"
        finalP = pathForSave + "/" + nameRes + ".txt"
        try:
            with open(finalP, "w") as saveAs:
                saveAs.writelines(self.preSave)
                saveAs.close()
            messagebox.showinfo('YES!', "The results are saved!\nThe name of the saved file: "+ nameRes + "\nsaved in: "+ pathForSave)
            self.IDQ = self.IDQ + 1
        except:
            messagebox.showerror('NO!', "The results are NOT saved! ")

    def MsaveRes(self):
        pathForSave = askdirectory()
        # print(self.selectQ)
        nameRes = str(self.idQ)+"_"+str(self.selectQ)+ "[RESULTS]"
        finalP = pathForSave + "/" + nameRes + ".txt"
        try:
            with open(finalP, "w") as saveAs:
                saveAs.writelines(self.preSave)
                saveAs.close()
            messagebox.showinfo('YES!', "The results are saved!\nThe name of the saved file: "+ nameRes + "\nsaved in: "+ pathForSave)
            self.IDQ = self.IDQ + 1
        except:
            messagebox.showerror('NO!', "The results are NOT saved! ")



    def MsaveAllRes(self):

        pathForSave = askdirectory()
        nameRes = "all_queries_together[RESULTS]"
        finalP = pathForSave + "/" + nameRes + ".txt"
        try:
            with open(finalP, "w") as saveAs:
                for line in self.dictRes:
                    for ans in self.dictRes[line]:
                        saveAs.write(str(line[0]) + " 0 " + str(ans[0]) + " 1 " + str(round(ans[1], 4)) + " oi\n")
                saveAs.close()
            messagebox.showinfo('YES!', "The results are saved! ")
            self.IDQ = self.IDQ + 1
        except:
            messagebox.showerror('NO!', "The results are NOT saved! ")


    def selectedItemInCitiesList(self):
        citiesSelectedList=[]
        for i in self.citiesList.curselection():
            citiesSelectedList.append(self.citiesList.get(i))
        return(citiesSelectedList)


    def queryFileBrowse(self):
        dirWind = tk.Tk()
        dirWind.withdraw()
        path = askopenfile()
        if(path != None):
            path = path.name
            if(len(str(self.multiQueryTextField.get())) != 0):
                self.multiQueryTextField.delete(0, 'end')
            if(path != None):
                self.multiQueryTextField.insert(0, str(path))
            dirWind.destroy()

    def openEnt(self,event):
        if(self.winE != None):
            self.winE.destroy()
            self.winE=None
        if (len((list(self.MresTable.item(self.MresTable.focus()).values()))[2]) > 3):

            entList = ((list(self.MresTable.item(self.MresTable.focus()).values()))[2][3]).split()
            # print(entList)
            self.winE = tk.Toplevel()
            self.winE.geometry("300x220")
            self.winE.title("Entities of this query")
            scrollbar = tk.Scrollbar(self.winE)
            scrollbar.pack(side='right', fill='y')
            self.winE.configure(background='#000000')

            mylist = tk.Listbox(self.winE, yscrollcommand=scrollbar.set, width=200)
            if(len(entList)>1):
                mylist.insert(tk.END, (str(entList[0]) + " : " + (str(entList[1])) + "\n"))
            if (len(entList) > 2):
                mylist.insert(tk.END, (str(entList[2]) + " : " + (str(entList[3])) + "\n"))
            if (len(entList) > 4):
                mylist.insert(tk.END, (str(entList[4]) + " : " + (str(entList[5])) + "\n"))
            if (len(entList) > 6):
                mylist.insert(tk.END, (str(entList[6]) + " : " + (str(entList[7])) + "\n"))
            if (len(entList) > 8):
                mylist.insert(tk.END, (str(entList[8]) + " : " + (str(entList[9])) + "\n"))

            mylist.pack(side=tk.LEFT, fill=tk.BOTH)
            scrollbar.config(command=mylist.yview)



    def showEntSIngle(self, event):
        if (self.winES != None):
            self.winES.destroy()
            self.winES = None
        if (len((list(self.resTable.item(self.resTable.focus()).values()))[2]) > 3):
            entList = ((list(self.resTable.item(self.resTable.focus()).values()))[2][3]).split()

            self.winES = tk.Toplevel()
            self.winES.geometry("300x220")
            self.winES.title("Entities of this query")
            scrollbar = tk.Scrollbar(self.winES)
            scrollbar.pack(side='right', fill='y')
            self.winES.configure(background='#000000')

            mylist = tk.Listbox(self.winES, yscrollcommand=scrollbar.set, width=200)
            if(len(entList) > 0):
                mylist.insert(tk.END, (str(entList[0]) + " : " + (str(entList[1])) + "\n"))
            if (len(entList) > 2):
                mylist.insert(tk.END, (str(entList[2]) + " : " + (str(entList[3])) + "\n"))
            if (len(entList) > 4):
                mylist.insert(tk.END, (str(entList[4]) + " : " + (str(entList[5])) + "\n"))
            if (len(entList) > 6):
                mylist.insert(tk.END, (str(entList[6]) + " : " + (str(entList[7])) + "\n"))
            if (len(entList) > 8):
                mylist.insert(tk.END, (str(entList[8]) + " : " + (str(entList[9])) + "\n"))

            mylist.pack(side=tk.LEFT, fill=tk.BOTH)
            scrollbar.config(command=mylist.yview)


if __name__ == '__main__':
    vp_start_gui()





