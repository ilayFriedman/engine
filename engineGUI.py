#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 04, 2018 12:10:45 PM +0200  platform: Windows NT
import os
import timeit
import ujson
from tkinter import *
import csv
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from tkinter.filedialog import askopenfilename, askdirectory
import tkinter.messagebox as tkMessageBox
import tkinter.simpledialog as tkSimpleDialog
from tkinter.simpledialog import Dialog
from ReadFile import ReadFile
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

# import first_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    #first_support.set_Tk_var()
    top = Toplevel1 (root)
    #first_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    # first_support.set_Tk_var()
    top = Toplevel1 (w)
    # first_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    pass

class Toplevel1:


    def __init__(self, top=None):


        self.makeIndex=None
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.filename=""
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("668x420+474+198")
        top.title("Engine!")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.018, rely=0.045, relheight=0.886
                , relwidth=0.959)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=535)


        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.729, rely=0.308, height=34, width=127)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        # self.Button1.configure(command=first_support.self.loadtemplate)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Run''' ,command=self.createAll)

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(height=60, width=300)
        self.Label4.config(font=("David", 25))
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Engine - Part A''')



        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.019, rely=0.308, height=21, width=81)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Source path:''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.187, rely=0.462,height=20, relwidth=0.325)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Entry2 = tk.Entry(self.Frame1)
        self.Entry2.place(relx=0.187, rely=0.308, relheight=0.108 , relwidth=0.329)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.019, rely=0.462, height=21, width=47)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Save as:''')



        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.34, rely=0.718, height=34, width=115)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Reset and\n clear all''' ,command=self.clearAll)

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.037, rely=0.718, height=34, width=150)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''View all terms\n in dictionary''' ,command=self.showDict)

        self.Button4 = tk.Button(self.Frame1)
        self.Button4.place(relx=0.583, rely=0.718, height=34, width=121)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Get dictionary\n to memory''' , command=self.getDict)

        self.Button5_1 = tk.Button(self.Frame1)
        self.Button5_1.place(relx=0.523, rely=0.308, height=24, width=49)
        self.Button5_1.configure(activebackground="#ececec")
        self.Button5_1.configure(activeforeground="#000000")
        self.Button5_1.configure(background="#d9d9d9")
        self.Button5_1.configure(disabledforeground="#a3a3a3")
        self.Button5_1.configure(foreground="#000000")
        self.Button5_1.configure(highlightbackground="#d9d9d9")
        self.Button5_1.configure(highlightcolor="black")
        self.Button5_1.configure(pady="0")
        self.Button5_1.configure(text='''browse''',command=self.browse1)

        self.Button5_2 = tk.Button(self.Frame1)
        self.Button5_2.place(relx=0.523, rely=0.462, height=24, width=49)
        self.Button5_2.configure(activebackground="#ececec")
        self.Button5_2.configure(activeforeground="#000000")
        self.Button5_2.configure(background="#d9d9d9")
        self.Button5_2.configure(disabledforeground="#a3a3a3")
        self.Button5_2.configure(foreground="#000000")
        self.Button5_2.configure(highlightbackground="#d9d9d9")
        self.Button5_2.configure(highlightcolor="black")
        self.Button5_2.configure(pady="0")
        self.Button5_2.configure(text='''browse''',command=self.browse2)

        self.Button6 = tk.Button(self.Frame1)
        self.Button6.place(relx=0.729, rely=0.128, height=24, width=100)
        self.Button6.configure(activebackground="#ececec")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="#000000")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''text languages''', command=self.langs)
        self.var1 = 0
        self.var1 = IntVar()
        v= Checkbutton(top, text="Stemming?", variable=self.var1, )
        v.place(relx=.80, rely=.55, anchor="c")




    def browse2(self):
        dirWind = tk.Tk()
        dirWind.withdraw()
        self.dictSorce1 = askdirectory()
        self.Entry1.after(0,self.Entry1.insert(0, self.dictSorce1))
        dirWind.destroy()

    def browse1(self):
        dirWind = tk.Tk()
        dirWind.withdraw()
        self.dictSorce2 = askdirectory()
        self.Entry1.after(0, self.Entry2.insert(0, self.dictSorce2))
        dirWind.destroy()

    def createAll(self):
        if(os.path.exists(self.Entry1.get()+"/finalIndexName.txt") and self.var1 == 0):
            os.remove(self.Entry1.get() + "/finalIndexName.txt")
        if(os.path.exists(self.Entry1.get()+"/fileIndex.ujson") and self.var1 == 0):
            os.remove(self.Entry1.get() + "/fileIndex.ujson")
        if(os.path.exists(self.Entry1.get()+"/citiesIndex.ujson") and self.var1 == 0):
            os.remove(self.Entry1.get() + "/citiesIndex.ujson")
        if(os.path.exists(self.Entry1.get()+"/baseDict.ujson") and self.var1 == 0):
            os.remove(self.Entry1.get() + "/baseDict.ujson")

        if(os.path.exists(self.Entry1.get()+"/S_finalIndexName.txt") and self.var1 == 1):
            os.remove(self.Entry1.get() + "/S_finalIndexName.txt")
        if(os.path.exists(self.Entry1.get()+"/S_fileIndex.ujson") and self.var1 == 1):
            os.remove(self.Entry1.get() + "/S_fileIndex.ujson")
        if(os.path.exists(self.Entry1.get()+"/S_citiesIndex.ujson") and self.var1 == 1):
            os.remove(self.Entry1.get() + "/S_citiesIndex.ujson")
        if(os.path.exists(self.Entry1.get()+"/S_baseDict.ujson") and self.var1 == 1):
            os.remove(self.Entry1.get() + "/S_baseDict.ujson")
        if(self.makeIndex != None):
            if(self.var1.get() == 0):
                os.remove(self.Entry1.get()+"/finalIndexName.txt")
                os.remove(self.Entry1.get()+"/fileIndex.ujson")
                os.remove(self.Entry1.get()+"/citiesIndex.ujson")
                os.remove(self.Entry1.get()+"/baseDict.ujson")
            elif self.var1.get() == 1:
                os.remove(self.Entry1.get()+"/S_finalIndexName.txt")
                os.remove(self.Entry1.get()+"/S_fileIndex.ujson")
                os.remove(self.Entry1.get()+"/S_citiesIndex.ujson")
                os.remove(self.Entry1.get()+"/S_baseDict.ujson")
            # self.Entry1.delete(0, 'end') # posting!!
            # self.Entry2.delete(0, 'end')
            self.makeIndex=None
            self.createAll()
        else:
            if (self.Entry1.get() is None or self.Entry1.get() == "" or self.Entry2.get() is None or self.Entry2.get() == ""):
                messagebox.showerror('Cannot make it!', 'Please enter path for sorce and posting!')
            else:
                start = timeit.default_timer()
                self.makeIndex = ReadFile(self.dictSorce2, self.dictSorce1)
                # print (self.makeIndex)
                if (self.var1.get() == 1):
                    self.makeIndex.do_Stemming = True
                self.makeIndex.readAllFiles()

                stop = timeit.default_timer()
                string = "~### FINISH ###~ :\n" + str(stop - start) + " seconds takes to index everything.\n" + \
                         str(self.makeIndex.textCount) + " files indexes!\n" + str(
                    len(self.makeIndex.indexer.baseDict.keys())) + " terms is created!"
                messagebox.showinfo('Info about Creation', string)

        pass


    def langs(self):
        if (self.makeIndex == None):
            messagebox.showerror('oops!', 'Please enter path for sorce and posting and click Run\nTo see relevant languages')
        else:
            cityString=""
            ans=self.makeIndex.langList
            for city in self.makeIndex.langList:
                cityString = cityString + city + "\n"
            messagebox.showinfo('languages',cityString)
        pass

    def clearAll(self):
        try:
            if(self.var1.get() == 0):
                os.remove(self.Entry1.get()+"/finalIndexName.txt")
                os.remove(self.Entry1.get()+"/fileIndex.ujson")
                os.remove(self.Entry1.get()+"/citiesIndex.ujson")
                os.remove(self.Entry1.get()+"/baseDict.ujson")
            elif self.var1.get() == 1:
                os.remove(self.Entry1.get()+"/S_finalIndexName.txt")
                os.remove(self.Entry1.get()+"/S_fileIndex.ujson")
                os.remove(self.Entry1.get()+"/S_citiesIndex.ujson")
                os.remove(self.Entry1.get()+"/S_baseDict.ujson")
            self.Entry1.delete(0, 'end') # posting!!
            self.Entry2.delete(0, 'end')
            self.makeIndex=None
            messagebox.showinfo('All reset!', 'Files deleted! Everything reset ')
            self.var1.set(0)
        except:
            messagebox.showerror('oops!', 'Something worng!\n Check if the files is no already deleted! ')
        pass

    def showDict(self):
        if (self.makeIndex == None):
            messagebox.showerror('oops!', 'please Run in valid adress')
        else:
            win = Toplevel()
            win.geometry("200x220")
            win.title("Terms")
            scrollbar = Scrollbar(win)
            scrollbar.pack(side=RIGHT, fill=Y)

            mylist = Listbox(win, yscrollcommand=scrollbar.set)
            for term in sorted(self.makeIndex.indexer.baseDict,key=str.casefold):
                mylist.insert(END, (str(term) + " : " + str(self.makeIndex.indexer.baseDict[term][2]) + "\n"))

            mylist.pack(side=LEFT, fill=BOTH)
            scrollbar.config(command=mylist.yview)

        pass

    def getDict(self):
        try:
            if (self.var1 == 0):
                file = open(self.Entry1.get() + "/baseDict.ujson", "r+")
            elif (self.var1 == 1):
                file = open(self.Entry1.get() + "/S_baseDict.ujson", "r+")
            dict = ujson.load(file)
            file.close()
            stringToPrint=""
            for key in dict:
                stringToPrint ="sdfsdf"
            with open("fastDict.txt","a+") as fastDict:
                fastDict.writelines(stringToPrint)
                fastDict.close()
                os.system("notepad.exe fastDict.txt")
                fastDict.close()
                os.remove("fastDict.txt")
        except:
            messagebox.showerror('oops!', 'Something worng! file not exist\n Check if the file is no already deleted! ')


if __name__ == '__main__':
    vp_start_gui()





